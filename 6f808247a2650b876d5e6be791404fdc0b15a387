{
  "comments": [
    {
      "key": {
        "uuid": "2bd36eb1_4985e7e1",
        "filename": "BUILD",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1012541
      },
      "writtenOn": "2019-12-17T16:58:29Z",
      "side": 1,
      "message": "nit: What about websession-broker-based or something similar? websession-broker sounds like a broker for websessions. Also you correctly called the implementation class \"BrokerBasedWebSession$Module\"",
      "range": {
        "startLine": 17,
        "startChar": 28,
        "endLine": 17,
        "endChar": 45
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87e4d27f_a2d5a1c8",
        "filename": "BUILD",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-18T09:31:25Z",
      "side": 1,
      "message": "It is actually a broker of sessions across the cluster, isn\u0027t it?\n\nIt would be best for discoverability to keep the websession-broker to mimic the websession-flatfile naming:\n- websession-flatfile \u003d\u003e websession based on flat-file storage\n- websession-broker \u003d\u003e websession based on broker storage",
      "parentUuid": "2bd36eb1_4985e7e1",
      "range": {
        "startLine": 17,
        "startChar": 28,
        "endLine": 17,
        "endChar": 45
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c5564ca_b042cc83",
        "filename": "BUILD",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1005270
      },
      "writtenOn": "2019-12-18T12:02:45Z",
      "side": 1,
      "message": "I agree we should follow the convention",
      "parentUuid": "87e4d27f_a2d5a1c8",
      "range": {
        "startLine": 17,
        "startChar": 28,
        "endLine": 17,
        "endChar": 45
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3382d50_498df04e",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/websession/broker/BrokerBasedWebSessionCache.java",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1005270
      },
      "writtenOn": "2019-12-17T14:49:55Z",
      "side": 1,
      "message": "Current Gerrit implementation is using WebSessionManager.Val to hold the details about the session. Unfortunately the way how this class is implemented is limiting the way how we can use it with our code. The biggest problem is with json serialisation:\n* all the fields are marked as private and transient(they are skipped by json serializer)\n* some getters are missing, some are in default scope(I was thinking about writing TransportVal class just for json serialisation)\n* class is marked as final so we cannot extend it and make json serializable\n\nOnly thing which works is standard java serialization(websession-flatfile is using it as well).\n\nTo fix this issue we have to change gerrit core. \n\nAnother way is to use workaround. Instead of serialising to json I\u0027m serialising Val object to byte array(with java serialisation) and passing it as a payload to the EventMessage. This event is implemented in WebSessionEvent class.\n\nI\u0027m not a huge fan of this solution so if you have any opinion please share it.",
      "range": {
        "startLine": 44,
        "startChar": 65,
        "endLine": 44,
        "endChar": 86
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e9f81cb_43bad0c3",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/websession/broker/BrokerBasedWebSessionCache.java",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1012541
      },
      "writtenOn": "2019-12-17T18:06:35Z",
      "side": 1,
      "message": "mmm..nothing easy comes into my mind.",
      "parentUuid": "e3382d50_498df04e",
      "range": {
        "startLine": 44,
        "startChar": 65,
        "endLine": 44,
        "endChar": 86
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8365739_e4813da7",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/websession/broker/BrokerBasedWebSessionCache.java",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-18T07:59:50Z",
      "side": 1,
      "message": "I believe we should keep on using the way Gerrit works at the moment for serializing sessions.\nOnce we get that solution through and working, we could think about changing Gerrit for v3.2. However, that is going to be hard to be accepted as-is, because it is going to be a breaking change I believe.",
      "parentUuid": "7e9f81cb_43bad0c3",
      "range": {
        "startLine": 44,
        "startChar": 65,
        "endLine": 44,
        "endChar": 86
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c035628_1af393ac",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/websession/broker/BrokerBasedWebSessionCache.java",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1005270
      },
      "writtenOn": "2019-12-18T12:02:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e8365739_e4813da7",
      "range": {
        "startLine": 44,
        "startChar": 65,
        "endLine": 44,
        "endChar": 86
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6dc81ad_bbdca2c4",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/websession/broker/BrokerBasedWebSessionCache.java",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1012541
      },
      "writtenOn": "2019-12-17T16:58:29Z",
      "side": 1,
      "message": "not: Here we skip all the messages which are not websession replated, right? Should the message be something like: \"Skipping not a web session message\" ?",
      "range": {
        "startLine": 66,
        "startChar": 19,
        "endLine": 66,
        "endChar": 54
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f8d3ba4_eef69703",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/websession/broker/BrokerBasedWebSessionCache.java",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-18T07:59:50Z",
      "side": 1,
      "message": "Are we really expecting anything that is not a websession event?",
      "parentUuid": "d6dc81ad_bbdca2c4",
      "range": {
        "startLine": 66,
        "startChar": 19,
        "endLine": 66,
        "endChar": 54
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7c623b3_d0e2d89e",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/websession/broker/BrokerBasedWebSessionCache.java",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1005270
      },
      "writtenOn": "2019-12-18T12:02:45Z",
      "side": 1,
      "message": "That\u0027s the thing we are not expecting but with any message bus you cannot trust the broker, someone by mistake(in configuration or even from command line) can post some event which should not be part of that topic, we have to make sure that we will not blow up",
      "parentUuid": "8f8d3ba4_eef69703",
      "range": {
        "startLine": 66,
        "startChar": 19,
        "endLine": 66,
        "endChar": 54
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "661d4475_45a37ad3",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/websession/broker/BrokerBasedWebSessionCache.java",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1012541
      },
      "writtenOn": "2019-12-17T16:58:29Z",
      "side": 1,
      "message": "What about the REMOVE event? Why don\u0027t we need to propagate them?",
      "range": {
        "startLine": 151,
        "startChar": 15,
        "endLine": 151,
        "endChar": 24
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3f050f9_e219c804",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/websession/broker/BrokerBasedWebSessionCache.java",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-18T07:59:50Z",
      "side": 1,
      "message": "I believe we would then need to wrap the Val for knowing if it is a ADD ore REMOVE session data?",
      "parentUuid": "661d4475_45a37ad3",
      "range": {
        "startLine": 151,
        "startChar": 15,
        "endLine": 151,
        "endChar": 24
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9c07b4d_25b9f699",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/websession/broker/BrokerBasedWebSessionCache.java",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1005270
      },
      "writtenOn": "2019-12-18T12:02:45Z",
      "side": 1,
      "message": "This wrapping is already done in WebSessionEvent. WebSessionEvent has following fields:\nkey - session key\nbyte[] payload - serialized Val object\nOperation operation - Add or Remove",
      "parentUuid": "a3f050f9_e219c804",
      "range": {
        "startLine": 151,
        "startChar": 15,
        "endLine": 151,
        "endChar": 24
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbd610d1_003e867b",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/websession/broker/BrokerBasedWebSessionCache.java",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1005270
      },
      "writtenOn": "2019-12-17T14:49:55Z",
      "side": 1,
      "message": "Here we are expecting instanceId, but instance id is a multi-site functionality. I remember discussion that it would be nice to have it in gerrit core. I\u0027m happy to propose that change to gerrit core. We can also create small lib with this functionality and share it between multi-site and websession-broker.\n\nFor now it\u0027s not a big problem because we do not generate new events based on received one so we will not get into the loop.",
      "range": {
        "startLine": 163,
        "startChar": 18,
        "endLine": 163,
        "endChar": 35
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4df97d35_32899eac",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/websession/broker/BrokerBasedWebSessionCache.java",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1012541
      },
      "writtenOn": "2019-12-17T18:06:35Z",
      "side": 1,
      "message": "\u003e Here we are expecting instanceId, but instance id is a multi-site functionality. I remember discussion that it would be nice to have it in gerrit core. I\u0027m happy to propose that change to gerrit core. We can also create small lib with this functionality and share it between multi-site and websession-broker.\n\u003e \n\u003e For now it\u0027s not a big problem because we do not generate new events based on received one so we will not get into the loop.\n\nSorry I\u0027m not following, how would we end up in an in infinite loop?",
      "parentUuid": "cbd610d1_003e867b",
      "range": {
        "startLine": 163,
        "startChar": 18,
        "endLine": 163,
        "endChar": 35
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e056acc9_21965eb6",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/websession/broker/BrokerBasedWebSessionCache.java",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-18T09:31:25Z",
      "side": 1,
      "message": "Yes, we should not end up in any infinite loop IMHO: we just store sessions at sign-in and read sessions when loading them into cache.",
      "parentUuid": "4df97d35_32899eac",
      "range": {
        "startLine": 163,
        "startChar": 18,
        "endLine": 163,
        "endChar": 35
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fb33ac0_450fc018",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/websession/broker/BrokerBasedWebSessionCache.java",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1005270
      },
      "writtenOn": "2019-12-18T12:02:45Z",
      "side": 1,
      "message": "@Ponch we have infinite loop situation in multi-site, for some events during the processing we are emitting new events so we want to make sure that we are not processing them again and again, we are using the instance id as a event source and we are skipping events if event source and instance id are equals\n\n@Luca we are not going to have any infinite loop I just wanted to point out that we don\u0027t have instance id so I\u0027m setting it to random UUID",
      "parentUuid": "e056acc9_21965eb6",
      "range": {
        "startLine": 163,
        "startChar": 18,
        "endLine": 163,
        "endChar": 35
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3043c30_ffb0a9a9",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/websession/broker/BrokerBasedWebSessionCacheTest.java",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1005270
      },
      "writtenOn": "2019-12-17T14:49:55Z",
      "side": 1,
      "message": "Similar problem to json serialization. Val class is writen in that way that it\u0027s really hard to write unit tests for a web-session cache. Constructor of Val is protected and all factory methods in WebSessionManager are protected as well. The only was I figure out is to actually populate the cache and get the value from there. Websession-flatfile is following similar approach",
      "range": {
        "startLine": 131,
        "startChar": 14,
        "endLine": 131,
        "endChar": 23
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4aa653cf_e0962d14",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/websession/broker/BrokerBasedWebSessionCacheTest.java",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-18T09:31:25Z",
      "side": 1,
      "message": "Don\u0027t get too mad with testing if that brings too much complexity. If tests are more complex than the code, which one is more likely to break? Remember that tests are the only part of the code that isn\u0027t tested at all :-)",
      "parentUuid": "c3043c30_ffb0a9a9",
      "range": {
        "startLine": 131,
        "startChar": 14,
        "endLine": 131,
        "endChar": 23
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "123f5f20_22ea8e31",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/websession/broker/BrokerBasedWebSessionCacheTest.java",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1005270
      },
      "writtenOn": "2019-12-18T12:02:45Z",
      "side": 1,
      "message": "Sure, the code is not that complicated is just not nice. I wanted to explain why I had to do that. The \u0027testing framework\u0027 is there so now adding new test is pretty simple",
      "parentUuid": "4aa653cf_e0962d14",
      "range": {
        "startLine": 131,
        "startChar": 14,
        "endLine": 131,
        "endChar": 23
      },
      "revId": "6f808247a2650b876d5e6be791404fdc0b15a387",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}